@{
    ViewBag.Title = "Index";
}

<script type="text/javascript" src="@Url.Content("~/Scripts/borrows.js")"></script>

<script type="text/javascript">
    
    // zmienna do przechowywania książek, które można wypożyczyć
    // po załadowaniu z bazy danych będzie zawierać tablicę np:
    // var booksToBorrow = [{ "BookId" : "1", "Title" : "Pierwsza książka" }, { "BookId" : "2", "Title" : "Druga książka" },];
    // lista może też być pusta jeśli nie ma żadnej książki do wypożyczenia.
    var booksToBorrow = null;

    // Przechowuje wybrane książki do wypożyczenia
    var selectedBooks = [];

    var bookNo = 1;

    this.loadBooksToBorrow = function () {
        var x = $.ajax({
            type: "POST",
            url: '/Borrow/GetBooksToBorrow',
            async: false,
            success: function (data) {
                booksToBorrow = data.Books;
            },
            error: function (err) {
                if (typeof console !== 'undefined') {
                    console.log('Error occured while getting response from method: /Borrow/GetBooksToBorrow. Response: ' + err.responseMessage);
                }
                alert('Błąd podczas pobierania książek do nowego wypożyczania');
            }
        });
    };

    // Źródło danych dla listy użytkowników
    this.userDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: 'User/GetUsersJson',
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                dataType: 'json'
            }
        },
        schema: {
            model: {
                fields: {
                    UserId: { type: "number" },
                    FullName: { type: "string" }
                }
            },
            data: "Items"
        }
    });
    
    function removeBorrow(id) {
        var x = $.ajax({
            type: "POST",
            url: '/Borrow/RemoveBorrow',
            data: JSON.stringify({ id: id }),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            async: false,
            success: function (data) {
                $('#borrows-content').data('view-model').gridDataSource.read();
            },
            error: function (err) {
                if (typeof console !== 'undefined') {
                    console.log('Error occured while getting response from method: /Borrow/GetBooksToBorrow. Response: ' + err.responseMessage);
                }
                alert('Błąd podczas usuwania wypożyczenia');
            }
        });
    }
    
    function removeBookFromList(id) {
        // Wybierz elementy div zawierające klasę 'control-group b-list' oraz 'data-id' równe id
        // a następnie usuń...
        $('div[class="control-group b-list"][data-id="' + id + '"]').remove();

        // Usuwanie list dodanych przez KendoUI (ukryte ale są)
        $('#book-' + id + '-list').remove();

        return true;
    }

    function addBookToList(addRemoveButton) {

        //if (bookNo - 1 >= booksToBorrow.length) {
        //    alert('Nie można wypożyczyć więcej ksiażek');
        //    return true;
        //}

        // http://api.jquery.com/append/
        // Dodawanie elementów do listy za pomocą klauzuli append:
        // $('.klasa-elementu').append(                    
        //     $('<div></div>')                            // <- nowy element tutaj też możemy użyć append, żeby dodać do nowego elementu zawartość
        //     .addClass("moja-klasa")                     // <- dodanie klasy do elementu div , po wygenerowaniu: <div class="moja-klasa"></div> 
        //     .attr({                                     // <- dodanie listy atrybutów
        //         "nazwa-atrybutu-1" : "wartosc1",        // <- pierwszy atrybut, po wygenerowaniu: <div nazwa-atrybutu-1="wartosc1"></div> 
        //         "nazwa-atrybutu-2" : "wartosc2",        // <- drugi atrybut, po wygenerowaniu: <div nazwa-atrybutu-2="wartosc2"></div> 
        //         "nazwa-atrybutu-3" : "wartosc3"         // <- drugi atrybut, po wygenerowaniu: <div nazwa-atrybutu-3="wartosc3"></div> 
        //     })
        // );
        //

        // 

        // Spospób 1
        //var divBookList = $('.book-list');
        //divBookList.append('<div class="control-group b-list" data-id="' + bookNo + '"><span class="control-label">Książka ' + bookNo + '</span><div class="controls"><input class="book-to-borrow" id="book-' + bookNo + '" />&nbsp;&nbsp;<a href="#" data-id="' + bookNo + '" class="remove-book" title="Usuń książkę"><i class="icon-remove"></i></a></div></div>');

        // Sposób 2 (bardziej elegancki)
        if (addRemoveButton) {
            $('.book-list').append(                                                               // do elementu: <div class="book-list"></div> dodajemy 
                $('<div></div>').append(                                                          // div: <div class="control-group b-list" data-id="bookNo"></div> 
                    $('<span></span>')                                                            // do tego powyżej dodajemy <span class="control-label">Książka bookNo</span>
                    .text('Książka ' + bookNo)
                    .addClass("control-label"),
                    $('<div></div>').append(                                                      // Kolejny element dodawany do <div class="control-group b-list" data-id="bookNo"></div> 
                        $('<input/>')
                        .addClass("book-to-borrow")
                        .attr({ "id": 'book-' + bookNo }),
                        '&nbsp;&nbsp;', // dwie spacje                                            // Kolejny element dodawany do <div class="control-group b-list" data-id="bookNo"></div> 
                        // Przycisk usuwania listy
                        $('<a></a>').append(                                                      // Kolejny element dodawany do <div class="control-group b-list" data-id="bookNo"></div> 
                            $('<i></i>')
                            .addClass("icon-remove")
                        )
                        .addClass("remove-book")
                        .attr({ "data-id": bookNo, "href": "#", "title": "Usuń książkę" })
                    )
                    .addClass("controls")
                )
                .attr({ "data-id": bookNo })
                .addClass("control-group b-list")
            );
        }
        else {
            $('.book-list').append(
                $('<div></div>').append(
                    $('<span></span>')
                    .text('Książka ' + bookNo)
                    .addClass("control-label"),
                    $('<div></div>').append(
                        $('<input/>')
                        .addClass("book-to-borrow")
                        .attr({ "id": 'book-' + bookNo })
                    )
                    .addClass("controls")
                )
                .attr({ "data-id": bookNo })
                .addClass("control-group b-list")
            );
        }

        $('#book-' + bookNo).kendoComboBox({
            index: 0,
            dataTextField: "Title",
            dataValueField: "BookId",
            dataSource: booksToBorrow
        });

        bookNo++;

        return true;
    }

    function contains(a, obj) {
        var i = a.length;
        while (i--) {
            if (a[i] === obj) {
                return true;
            }
        }
        return false;
    }

    function GetBooks() {
        var err = 0;
        $('input[class="book-to-borrow"]').each(function () {
            var bookId = $(this).val();
            if (bookId == "" && err == 0) {
                err = -1;
            }
            else if (booksToBorrow.length > 0 && contains(booksToBorrow, bookId)) {
                err = -2;
            }
            else if (bookId != "" && parseInt(bookId) > 0) {
                booksToBorrow.push(bookId);
            }
        });
        
        if (err != 0) {
            booksToBorrow = [];
        }
        
        return err;
    }

    function orderBooks() {
        var selectedUser = $('#UserId').val();
        if (selectedUser == 0) {
            alert('Musisz wybrać użytkownika');
            return;
        }

        booksToBorrow = [];

        var err = GetBooks();
        
        if (err == -1) {
            alert('Niektóre książki nie zostały wybrane!');
            return;
        }
        else if (err == -2) {
            alert('Niektóre książki zostały wybrane więcej niż jeden raz!');
            return;
        }
        else {
            var x = $.ajax({
                type: "POST",
                url: '/Borrow/OrderBooks',
                data: JSON.stringify({ userId: selectedUser, booksToBorrow: booksToBorrow }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                async: false,
                success: function (data) {
                    if (data.Success) {
                        // Przeładowanie danych...

                        $('#borrows-content').data('view-model').gridDataSource.read();
                        // grid.DataSource.read();
                        $('#borrow-modal').modal('hide');
                        
                    }
                },
                error: function (err) {
                    if (typeof console !== 'undefined') {
                        console.log('Error occured while getting response from method: /Borrow/GetBooksToBorrow. Response: ' + err.responseMessage);
                    }
                    alert('Błąd podczas składania zamówienia na wybrane książki');
                }
            });
        }
    }

    $('.new-borrow').live('click', function (e) {
        // niedopuść domyślnej akcji po kliknięciu
        e.preventDefault();
        bookNo = 1;
        
        // Funkcja $.when jest wykorzystywana do wcześniejszego załadowania
        // książek do wypożyczenia.
        // Funkcja zawarta w metodzie done zostanie wykonana dopiero po zakończeniu pobierania
        // książek do wypożyczenia (borrowBooks powinno już być różne od null). 
        $.when(loadBooksToBorrow()).done(function () {
            // Jeśli są książki do wypożyczenia...
            if (booksToBorrow != null && booksToBorrow.length) {
                
                var x = $.ajax({
                    type: "POST",
                    url: '/Borrow/NewBorrowView',
                    async: true, // czy wywołanie asynchroniczne bool
                    success: function (data) {

                        $('#b-modal').html(data);
                        

                        // Załaduj comboBox do wybierania użytkownika.
                        $("#UserId").kendoComboBox({
                            index: 0,
                            dataTextField: "FullName",
                            dataValueField: "UserId",
                            dataSource: userDataSource
                        });

                        // pokazujemy okno modalne z nowym wypożyczeniem
                        $('#borrow-modal').modal('show').on('hidden', function () {
                            // podczas chowania usuń zbędny kod html
                            $('.k-list-container').remove();
                        });

                        // Pierwsza lista bez przycisku usuwania
                        addBookToList(false);
                    },
                    error: function (err) {
                        if (typeof console !== 'undefined') {
                            console.log('Error occured while getting response from method: ' + method + '. Response: ' + err.responseMessage);
                        }
                        alert('Błąd podczas pobierania widoku do nowego wypożyczanie książki');
                    }
                });
            }
            else {
                alert('Brak książek do wypożyczenia!');
            }
        });
        
    });

    // Dodanie kolejnej książki do zamówienia
    $('.add-next-book').live('click', function (e) {
        e.preventDefault();
        // każda kolejna z przyciskiem usuwania listy
        addBookToList(true);
    });

    // Usuwanie książki z listą zamówień
    $('.remove-book').live('click', function (e) {
        e.preventDefault();
        var id = $(this).data('id');
        removeBookFromList(id);
    });
    
    // Usuwanie książki z listą zamówień
    $('.make-order').live('click', function (e) {
        e.preventDefault();
        orderBooks();
    });


    $('.remove-borrow').live('click', function (e) {
        e.preventDefault();
        var id = $(this).data('id');
        removeBorrow(id);
    });
    //

    $(document).ready(function () {
        var self = this;

        var vm = new borrowsGrid({
            form: $('#borrows-content'),
            baseUrl: '/Borrow/'
        });

        $('#borrows-content').data('view-model', vm);
    });


</script>



<div id="borrows-content" class="k-content">
    <div id="buttons">
        @Html.ActionLink("Dodaj", "AddBorrow", null, new { @class="btn new-borrow" })
    </div>
    <br />
    <div id="grid"></div>
    <div id="b-modal"></div>
</div>

